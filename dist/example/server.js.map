{"version":3,"file":"server.js","sourceRoot":"","sources":["../../src/example/server.ts"],"names":[],"mappings":";;AAAA,gCAA6G;AAC7G,2CAAoD;AAEpD,MAAM,MAAM,GAAG,IAAI,yBAAmB,CAAC,EAAE,EAAE;IACzC,GAAG,EAAE,oBAAY,CAAC,aAAa,CAAC;IAChC,YAAY,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC;CACpD,CAAC,CAAA;AACF,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;IAC1B,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;AAC7B,CAAC,CAAC,CAAA;AAEF,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,MAAqB,EAAE,EAAE;IAEhD,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,MAAM,CAAA;IAEzC,OAAO,CAAC,GAAG,CAAC,qBAAqB,MAAM,CAAC,KAAK,EAAE,CAAC,CAAA;IAEhD,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAuB,EAAE,EAAE;QAC/C,OAAO,CAAC,GAAG,CAAC,qBAAqB,OAAO,CAAC,QAAQ,MAAM,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAA;IACtF,CAAC,CAAC,CAAA;IAEF,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,OAAuB,EAAE,aAA0G,EAAE,EAAE;QAC3J,OAAO,CAAC,GAAG,CAAC,qBAAqB,OAAO,CAAC,QAAQ,MAAM,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAA;QACpF,aAAa,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACpC,UAAU,CAAC,GAAG,EAAE;gBACd,OAAO,CAAC;oBACN,QAAQ,EAAE,KAAK;oBACf,WAAW,EAAE,sBAAgB,CAAC,sBAAsB;oBACpD,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;iBACjC,CAAC,CAAA;YACJ,CAAC,EAAE,GAAG,CAAC,CAAA;QACT,CAAC,CAAC,CAAC,CAAA;IACL,CAAC,CAAC,CAAA;IAEF,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAA;IAEjD,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAA;AAEpE,CAAC,CAAC,CAAA;AAEF,MAAM,CAAC,MAAM,CAAC;IACZ,IAAI,EAAE,SAAS;IACf,IAAI,EAAE,IAAI;CACX,CAAC,CAAA","sourcesContent":["import { TransportError, GrpcTransport, GrpcTransportServer, MessagePayload, FrameContentType } from '../lib'\nimport { default as createLogger } from 'ilp-logger'\n\nconst server = new GrpcTransportServer({}, {\n  log: createLogger('grpc-server'),\n  authenticate: () => Promise.resolve({ id: 'test' })\n})\nserver.on('listening', () => {\n  console.log('Listening...')\n})\n\nserver.on('connection', (stream: GrpcTransport) => {\n\n  const { accountId, accountInfo } = stream\n\n  console.log(`CONNECTION: state=${stream.state}`)\n\n  stream.on('message', (message: MessagePayload) => {\n    console.log(`MESSAGE (protocol=${message.protocol}): ${message.payload.toString()}`)\n  })\n\n  stream.on('request', (message: MessagePayload, replyCallback: (reply: MessagePayload | TransportError | Promise<MessagePayload | TransportError>) => void) => {\n    console.log(`REQUEST (protocol=${message.protocol}): ${message.payload.toString()}`)\n    replyCallback(new Promise((respond) => {\n      setTimeout(() => {\n        respond({\n          protocol: 'ilp',\n          contentType: FrameContentType.ApplicationOctetStream,\n          payload: Buffer.from('Goodbye!')\n        })\n      }, 100)\n    }))\n  })\n\n  stream.on('error', (error) => console.log(error))\n\n  stream.on('cancelled', (error) => console.log('cancelled', error))\n\n})\n\nserver.listen({\n  host: '0.0.0.0',\n  port: 5001\n})\n"]}